require("dotenv").config();
const { google } = require("googleapis");
const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const express = require("express");
const cors = require("cors");
const morgan = require("morgan");

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const PORT = process.env.PORT;

console.log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===");
console.log("SUPABASE_URL:", process.env.SUPABASE_URL);
console.log("üîß SUPABASE_KEY:", process.env.SUPABASE_KEY ? "‚úÖ" : "‚ùå NOT SET");
console.log("üîß SHEET_ID:", process.env.SHEET_ID);
console.log("üîß GOOGLE_CREDENTIALS_JSON:", process.env.GOOGLE_CREDENTIALS_JSON);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// Middleware
app.use(morgan("dev"));
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
let sheets;
async function initializeGoogleSheets() {
  try {
    const credentialsPath = process.env.GOOGLE_CREDENTIALS_JSON;

    if (!fs.existsSync(credentialsPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${credentialsPath}`);
    }

    fs.accessSync(credentialsPath, fs.constants.R_OK);

    const credentialsJson = fs.readFileSync(credentialsPath, "utf8");
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(credentialsJson),
      scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
    });

    sheets = google.sheets({ version: "v4", auth });

    await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: "–¢–ï-21–±!A1:A1",
    });

    console.log("‚úÖ Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω");
  } catch (error) {
    console.error("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Google Sheets:", error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function loadDataFromSheets() {
  try {
    const groups = ["–¢–ï-21–±", "–¢–ï-31–±"];
    let allData = [];

    for (const group of groups) {
      const response = await sheets.spreadsheets.values.get({
        spreadsheetId: process.env.SHEET_ID,
        range: `${group}!A1:C`, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö A, B, C
      });

      if (!response.data.values || response.data.values.length < 2) {
        console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–∑ ${group} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã.`);
        continue;
      }

      const headers = response.data.values[0].map(h => h.trim().toLowerCase());
      const rows = response.data.values.slice(1);

      const processedData = rows.map(row => {
        let entry = { group };
        headers.forEach((header, index) => {
          entry[header] = row[index] || null;
        });
        return entry;
      });

      allData = allData.concat(processedData);
    }

    console.log("üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", allData);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
    const { error } = await supabase
      .from("portfolio_te21b")
      .upsert(allData, { onConflict: ["full_name", "subject"] });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase:", error);
    } else {
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Supabase!");
    }
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:", error.message);
  }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.get("/user-subjects", async (req, res) => {
  console.log("üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:", req.query);

  const { firstName, lastName } = req.query;
  if (!firstName || !lastName) {
    return res.status(400).json({ error: "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const searchPattern = `%${lastName} ${firstName}%`;
  console.log("üîç –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É:", searchPattern);

  try {
    const { data: subjects, error } = await supabase
      .from("portfolio_te21b")
      .select("subject, status")
      .ilike("full_name", searchPattern);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Supabase:", error.message);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", details: error.message });
    }

    const result = {
      passed: subjects.filter(item => item.status === true).map(item => item.subject),
      notPassed: subjects.filter(item => item.status === false).map(item => item.subject)
    };

    res.json(result);
  } catch (error) {
    console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// Keep-alive –¥–ª—è Render
app.get("/", (req, res) => {
  res.send("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await initializeGoogleSheets();
    await loadDataFromSheets();

    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log("–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", process.env.RENDER_EXTERNAL_URL);
    });

    setInterval(loadDataFromSheets, 5 * 60 * 1000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  } catch (error) {
    console.error("üî• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", error);
    process.exit(1);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ –¥–ª—è Render
const keepAwake = () => {
  setInterval(() => {
    fetch("https://portfolioreader.onrender.com/")
      .then(() => console.log("–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω"))
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:", err));
  }, 20000);
};

startServer();
