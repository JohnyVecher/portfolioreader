require("dotenv").config();
const { google } = require("googleapis");
const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const express = require("express");
const axios = require("axios");
const cors = require("cors");
const morgan = require("morgan");

const app = express();

// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log("üîß SUPABASE_URL:", process.env.SUPABASE_URL);
console.log("üîß SUPABASE_KEY:", process.env.SUPABASE_KEY ? "‚úÖ" : "‚õî –úISSING");
console.log("üîß SHEET_ID:", process.env.SHEET_ID);
console.log("üîß GOOGLE_CREDENTIALS_JSON:", process.env.GOOGLE_CREDENTIALS_JSON);

let supabase;
let sheets;

async function initializeServices() {
  try {
    // üîπ 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

    // üîπ 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    const credentialsPath = process.env.GOOGLE_CREDENTIALS_JSON;
    if (!fs.existsSync(credentialsPath)) {
      throw new Error(`–§–∞–π–ª ${credentialsPath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    const credentialsJson = fs.readFileSync(credentialsPath, "utf8");
    const auth = new google.auth.GoogleAuth({
      credentials: JSON.parse(credentialsJson),
      scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
    });

    sheets = google.sheets({ version: "v4", auth });

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: "–¢–ï-21–±!A1:A1",
    });

    console.log("‚úÖ Services initialized successfully");
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:", error.message);
    process.exit(1);
  }
}

// üîπ Middleware
app.use(morgan("dev"));
app.use(cors({
  origin: "*",  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–æ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏)
  methods: "GET,POST",
  allowedHeaders: "Content-Type,Authorization",
}));
app.use(express.json());

// üìå **–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets**
async function uploadPortfolioData() {
  try {
    console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets...");
    
    const { data } = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: "–¢–ï-21–±!A1:L100",  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    });

    const rows = data.values;
    if (!rows || rows.length === 0) {
      console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets.");
      return;
    }

    // üîπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
    await supabase.from("portfolio_te21b").delete().neq("id", 0);

    // üîπ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    const formattedData = rows.slice(1).map(row => ({
      full_name: `${row[1]} ${row[0]}`.trim(),  // –§–∞–º–∏–ª–∏—è + –ò–º—è
      subject: row[2]?.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
      status: row[3]?.toLowerCase() === "—Å–¥–∞–Ω–æ",
    }));

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
    const { error } = await supabase.from("portfolio_te21b").insert(formattedData);
    if (error) throw error;

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${formattedData.length} –∑–∞–ø–∏—Å–µ–π –≤ Supabase.`);
  } catch (err) {
    console.error("üî• –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets:", err.message);
  }
}

// üìå **–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
app.get("/user-subjects", async (req, res) => {
  try {
    const { firstName, lastName } = req.query;

    if (!firstName || !lastName) {
      return res.status(400).json({ error: "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log(`üîç –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è: ${lastName} ${firstName}`);

    // üîπ –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
    const searchPattern = `%${lastName} ${firstName}%`;
    const { data: subjects, error } = await supabase
      .from("portfolio_te21b")
      .select("subject")
      .ilike("full_name", searchPattern)
      .eq("status", true);

    if (error) throw error;

    res.json({ subjects: subjects.map(item => item.subject) });
  } catch (err) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
async function startServer() {
  try {
    await initializeServices();

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

      // üîπ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      uploadPortfolioData();

      // üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Ä–∞–∑ –≤ —á–∞—Å)
      setInterval(uploadPortfolioData, 60 * 60 * 1000);
    });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
}

startServer();
